#encoding:utf-8
#==============================================================================
# ■ Spriteset_Score
#------------------------------------------------------------------------------
#  显示分数的精灵组
#==============================================================================

require 'spriteset/spriteset_number'

#--------------------------------------------------------------------------
# ● Sprite_Score
#
#   显示当前分数的数字精灵，在 Spriteset_Score 内部使用，实际上是精灵组
#--------------------------------------------------------------------------
class Sprite_Score < Spriteset_Number
  #--------------------------------------------------------------------------
  # ● 获取位图
  #--------------------------------------------------------------------------
  def get_bitmap(bitmap)
    temp_bitmap = get_temp_bitmap
    target_bitmap = Bitmap.new(temp_bitmap.width*10/12,temp_bitmap.height/7)
    src_rect = Rect.new(temp_bitmap.width/12*2, temp_bitmap.height/7*2,
      target_bitmap.width, target_bitmap.height)
    target_bitmap.blt(0, 0, temp_bitmap, src_rect)
    temp_bitmap.dispose
    return target_bitmap
  end
  #--------------------------------------------------------------------------
  # ● 获取用于裁剪的临时位图
  #--------------------------------------------------------------------------
  def get_temp_bitmap
    Cache.skin("font_m")
  end
  #--------------------------------------------------------------------------
  # ● 数字 X 坐标
  #--------------------------------------------------------------------------
  def pos_x; Skin_Setting.setting(:ScoreX); end
  #--------------------------------------------------------------------------
  # ● 数字 Y 坐标
  #--------------------------------------------------------------------------
  def pos_y; Skin_Setting.setting(:ScoreY); end
  #--------------------------------------------------------------------------
  # ● 数字 Z 高度
  #--------------------------------------------------------------------------
  def pos_z; 0; end
  #--------------------------------------------------------------------------
  # ● 数字间距的调整
  #--------------------------------------------------------------------------
  def pos_width; 0; end
  #--------------------------------------------------------------------------
  # ● 居右对齐
  #--------------------------------------------------------------------------
  def pos_type; 2; end
end
#--------------------------------------------------------------------------
# ● Sprite_Score2
#
#   显示分数增加量的数字精灵，在 Spriteset_Score 内部使用，实际上是精灵组
#--------------------------------------------------------------------------
class Sprite_Score2 < Sprite_Score
  #--------------------------------------------------------------------------
  # ● 获取用于裁剪的临时位图
  #--------------------------------------------------------------------------
  def get_temp_bitmap
    Cache.skin("font_m_red")
  end
  #--------------------------------------------------------------------------
  # ● 数字 X 坐标
  #--------------------------------------------------------------------------
  def pos_x; Skin_Setting.setting(:ScoreX2); end
  #--------------------------------------------------------------------------
  # ● 数字 Y 坐标
  #--------------------------------------------------------------------------
  def pos_y; Skin_Setting.setting(:ScoreY2); end
  #--------------------------------------------------------------------------
  # ● 设置数字变更时的特效
  #--------------------------------------------------------------------------
  def set_change_effect
    @change_effect = [10]
    @number_list.each{|s| s.x -= @change_effect[0]}
  end
  #--------------------------------------------------------------------------
  # ● 更新数字变更时的特效
  #--------------------------------------------------------------------------
  def update_change_effect
    if @change_effect[0] > 0
      @number_list.each{|s| s.x += 2}
      @change_effect[0] -= 2
    end
  end
end
#--------------------------------------------------------------------------
# ● Spriteset_Score
#
#   显示分数的精灵组
#--------------------------------------------------------------------------
class Spriteset_Score < Spriteset_M5
  #--------------------------------------------------------------------------
  # ● 初始化
  #--------------------------------------------------------------------------
  def initialize(viewport)
    @sprite_score = Sprite_Score.new(viewport)
    @sprite_add   = Sprite_Score2.new(viewport)
    @sprite_add.clear
    @score = 0
    @clear_time = 0
  end
  #--------------------------------------------------------------------------
  # ● 更新
  #--------------------------------------------------------------------------
  def update
    super
    @clear_time -= 1
    if @score != Taiko.score
      score_last = @score
      @score = Taiko.score
      @sprite_score.show(@score)
      @sprite_add.show(@score - score_last)
      @clear_time = 40
    else
      @sprite_add.clear if @clear_time < 0
    end
    @sprite_add.update
  end
  #--------------------------------------------------------------------------
  # ● 释放
  #--------------------------------------------------------------------------
  def dispose
    super
    @sprite_score.dispose
    @sprite_add.dispose
  end
end