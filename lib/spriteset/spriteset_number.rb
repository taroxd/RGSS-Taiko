#encoding:utf-8
#==============================================================================
# ■ Spriteset_Number
#------------------------------------------------------------------------------
#  显示数字的精灵组
#==============================================================================

require 'sprite/sprite_number'

class Spriteset_Number < Spriteset_M5
  #--------------------------------------------------------------------------
  # ● 初始化
  #--------------------------------------------------------------------------
  def initialize(viewport = nil, filename = "")
    @number_list = []
    @viewport = viewport
    @bitmap = get_bitmap(filename)
    show(0)
  end
  #--------------------------------------------------------------------------
  # ● 获取位图
  #--------------------------------------------------------------------------
  def get_bitmap(filename)
    return Bitmap.new(1,1)
  end
  #--------------------------------------------------------------------------
  # ● 清除数字
  #--------------------------------------------------------------------------
  def clear
    @num_now = nil
    @number_list.compact!
    @number_list.each(&:clear)
  end
  #--------------------------------------------------------------------------
  # ● 更新
  #--------------------------------------------------------------------------
  def update
    super
    update_change_effect
  end
  #--------------------------------------------------------------------------
  # ● 释放精灵
  #--------------------------------------------------------------------------
  def dispose
    super
    @number_list.compact!
    @number_list.each(&:dispose)
    @bitmap.dispose
  end
  #--------------------------------------------------------------------------
  # ● 显示数字
  #--------------------------------------------------------------------------
  def show(num)
    return unless num != @num_now
    @num_now = num
    num = num.to_s
    num_array = []
    num_array.push(num.slice!(0, 1).to_i) until num.empty?
    clear
    num_array.size.times do |index|
      @number_list[index] ||= Sprite_Number.new(@viewport,@bitmap)
      @number_list[index].x = pos_x
      @number_list[index].y = pos_y
      @number_list[index].z = pos_z
      @number_list[index].x += (@bitmap.width / 10 + pos_width) * index
      @number_list[index].show(num_array[index])
    end
    update_placements((@bitmap.width/10+pos_width)*num_array.size-pos_width)
    set_change_effect
  end
  #--------------------------------------------------------------------------
  # ● 设置数字变更时的特效
  #--------------------------------------------------------------------------
  def set_change_effect
  end
  #--------------------------------------------------------------------------
  # ● 更新数字变更时的特效
  #--------------------------------------------------------------------------
  def update_change_effect
  end
  #--------------------------------------------------------------------------
  # ● 计算显示位置
  #--------------------------------------------------------------------------
  def update_placements(total_width)
    return unless pos_type == 1 || pos_type == 2
    @number_list.each do |num|
      num.x -= case pos_type
               when 1 then total_width/2
               when 2 then total_width
               end
    end
  end
  #--------------------------------------------------------------------------
  # ● 数字 X 坐标
  #--------------------------------------------------------------------------
  def pos_x; 0; end
  #--------------------------------------------------------------------------
  # ● 数字 Y 坐标
  #--------------------------------------------------------------------------
  def pos_y; 0; end
  #--------------------------------------------------------------------------
  # ● 数字 Z 高度
  #--------------------------------------------------------------------------
  def pos_z; 0; end
  #--------------------------------------------------------------------------
  # ● 数字间距的调整
  #--------------------------------------------------------------------------
  def pos_width; 0; end
  #--------------------------------------------------------------------------
  # ● 数字描绘的方式（0：居左对齐，1：居中对齐，2：居右对齐）
  #--------------------------------------------------------------------------
  def pos_type; 0; end
end